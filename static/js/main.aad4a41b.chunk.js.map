{"version":3,"sources":["services/API.ts","utils/utils.ts","components/question-card/QuestionCard.styles.ts","components/question-card/QuestionCard.tsx","pages/main/Main.styles.ts","interfaces/IQuestion.ts","pages/main/Main.tsx","index.tsx"],"names":["fetchQuizQuestions","amount","difficulty","type","a","endPoint","fetch","json","data","results","map","question","answers","array","incorrect_answers","correct_answer","sort","Math","random","GameContainer","styled","div","ButtonGameContainer","correct","userClicked","QuestionCard","callback","userAnswer","questionNr","totalQuestions","className","dangerouslySetInnerHTML","__html","answer","key","correctAnswer","disabled","value","onClick","Difficulty","QuestionType","GlobalStyle","createGlobalStyle","Wrapper","Main","props","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","startTrivia","EASY","MULTIPLE","newQuesitons","length","undefined","e","currentTarget","prev","answerObject","TOTAL_QUESTIONS","nextQuestion","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.aad4a41b.chunk.js","sourcesContent":["import { Difficulty, IQuestion, QuestionType } from \"../interfaces/IQuestion\";\nimport { suffleArray } from \"../utils/utils\";\n\n/*export type Question = {\n  category: string;\n  correct_answer: string;\n  difficulty: string;\n  incorrect_answers: string[];\n  question: string;\n  type: string;\n};*/\n\nexport type QuestionState = IQuestion & { answers: string[] };\n\nexport const fetchQuizQuestions = async (\n  amount: number,\n  difficulty: Difficulty,\n  type: QuestionType\n) => {\n  const endPoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=${type}`;\n  const data = await (await fetch(endPoint)).json();\n  return data.results.map((question: IQuestion) => ({\n    ...question,\n    answers: suffleArray([\n      ...question.incorrect_answers,\n      question.correct_answer,\n    ]),\n  }));\n};\n","export const suffleArray = (array: any[]) => \n[...array].sort(() => Math.random() - 0.5);","import styled from \"styled-components\";\n\nexport const GameContainer = styled.div`\n  border: 0.2rem solid #a38600;\n  box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.25);\n  max-width: 100vw;\n  background: #ecece2;\n  border-radius: 1rem;\n  text-align: center;\n  padding: 2rem;\n  margin: 0 4rem;\n\n  p {\n    font-size: 1.8rem;\n    margin-bottom: 1.4rem;\n  }\n`;\n\ntype ButtonGameControllerProps = {\n  correct: boolean;\n  userClicked: boolean;\n};\n\nexport const ButtonGameContainer = styled.div<ButtonGameControllerProps>`\n  transition: all 0.3s ease;\n  :hover {\n    opacity: 0.8;\n  }\n\n  button {\n    cursor: pointer;\n    user-select: none;\n    font-size: 2rem;\n    width: 100%;\n    height: 6rem;\n    margin: 0.5rem 0;\n    background-color: ${({ correct, userClicked }) =>\n      correct\n        ? \"#2bda4a\" //linear-gradient(90deg,#e0d097,#cac8a2)\n        : !correct && userClicked\n        ? \"#ff0f0f\" //linear-gradient(90deg, #ff5656, #c16868)\n        : \"#5ecac9\"}; // linear-gradient(90deg, #56ccff, #6eafb4)\n    border: 0.3rem solid #fff;\n    box-shadow: 0.1rem 0.2rem 0 rgba(0, 0, 0, 0.1);\n    border-radius: 1rem;\n    color: #fff;\n    text-shadow: 0 0.1rem 0 rgba(0, 0, 0, 0.25);\n  }\n`;\n","import React from \"react\";\nimport { IAnswerObject } from \"../../interfaces/IAnswerObject\";\nimport { Answer, Question } from \"../../interfaces/IQuestion\";\n// styles\nimport { GameContainer, ButtonGameContainer } from \"./QuestionCard.styles\";\n\ntype Props = {\n  question: Question;\n  answers: Answer[];\n  callback: (e: React.MouseEvent<HTMLButtonElement>) => void;\n  userAnswer: IAnswerObject | undefined;\n  questionNr: number;\n  totalQuestions: number;\n};\nconst QuestionCard: React.FC<Props> = ({\n  question,\n  answers,\n  callback,\n  userAnswer,\n  questionNr,\n  totalQuestions,\n}) => (\n  <GameContainer>\n    <p className=\"number\">\n      Question: {questionNr} / {totalQuestions}\n    </p>\n    <p dangerouslySetInnerHTML={{ __html: question }} />\n    <div>\n      {answers.map((answer) => (\n        <ButtonGameContainer\n          key={answer}\n          correct={userAnswer?.correctAnswer === answer}\n          userClicked={userAnswer?.answer === answer}\n        >\n          <button disabled={!!userAnswer} value={answer} onClick={callback}>\n            <span dangerouslySetInnerHTML={{ __html: answer }} />\n          </button>\n        </ButtonGameContainer>\n      ))}\n    </div>\n  </GameContainer>\n);\n\nexport default QuestionCard;\n","import styled, { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalStyle = createGlobalStyle`\n  * {\n        margin: 0;\n        padding: 0;\n        box-sizing: inherit;\n      }\n      html {\n        font-size: 62.5%;\n        box-sizing: border-box;\n      }\n\n      body {\n        font-family: PT Mono, sans-serif;\n        color: #555;\n        height: 100vh;\n        display: flex;\n        flex-direction: column;\n        justify-content: center;\n        background: linear-gradient(\n          to top left,\n          #d3954f,\n          hsla(64, 55%, 64%, 0.89)\n        );\n      }\n   \n`;\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-flow: column;\n  align-items: center;\n\n  > p {\n    color: white;\n  }\n\n  .score {\n    color: white;\n    font-size: 3rem;\n    margin: 2rem auto;\n  }\n\n  h1 {\n    font-family: PT Mono, \"Arial Narrow Bold\", sans-serif;\n\n    background-size: 100%;\n    font-size: 7rem;\n    font-weight: 400;\n    text-align: center;\n    margin: 2rem;\n  }\n\n  .start,\n  .next {\n    border: none;\n    font-size: 2rem;\n    padding: 2rem 5rem;\n    margin: 2rem 0;\n    border-radius: 0.7rem;\n    background: linear-gradient(180deg, #fff, #ffcc91);\n    border: 0.2rem solid #d38558;\n    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.25);\n    cursor: pointer;\n\n    /*cursor: pointer;\n    background: linear-gradient(180deg, #fff, #ffcc91);\n    border: 0.2rem solid #d38558;\n    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.25);\n    border-radius: 1rem;\n    height: 4rem;\n    margin: 2rem 0;\n    padding: 2rem 5rem;\n    font-size: 2rem;*/\n  }\n\n  .start {\n    max-width: 20rem;\n  }\n`;\n","export type Category = string;\nexport type Question = string;\nexport type Answer = string;\n\nexport enum Difficulty {\n  EASY = \"easy\",\n  MEDIUM = \"medium\",\n  HARD = \"hard\",\n}\nexport enum QuestionType {\n  MULTIPLE = \"multiple\",\n  TRUEORFALSE = \"boolean\",\n}\n\nexport interface IQuestion {\n  category: Category;\n  question: Question;\n  correct_answer: Answer;\n  incorrect_answers: Answer[];\n  difficulty: Difficulty;\n  type: QuestionType;\n}\n","import React, { useState } from \"react\";\n//types\nimport { fetchQuizQuestions, QuestionState } from \"../../services/API\";\n//components\nimport QuestionCard from \"../../components/question-card/QuestionCard\";\n//styles\nimport { GlobalStyle, Wrapper } from \"./Main.styles\";\nimport { IAnswerObject } from \"../../interfaces/IAnswerObject\";\nimport { Difficulty, QuestionType } from \"../../interfaces/IQuestion\";\n\nconst TOTAL_QUESTIONS = 10;\n\nconst Main: React.FC<{}> = (props) => {\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState<QuestionState[]>([]);\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState<IAnswerObject[]>([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n\n  const startTrivia = async () => {\n    setLoading(true);\n    setGameOver(false);\n    const newQuesitons = await fetchQuizQuestions(\n      TOTAL_QUESTIONS,\n      Difficulty.EASY,\n      QuestionType.MULTIPLE\n    );\n    setQuestions(newQuesitons);\n    setScore(0);\n    setUserAnswers([]);\n    setNumber(0);\n    setLoading(false);\n  };\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if (!gameOver) {\n      //user answer\n      const answer = e.currentTarget.value;\n      //check answer against correct answer\n      const correct = questions[number].correct_answer === answer;\n      // add score if answer is correct\n      if (correct) setScore((prev) => prev + 1);\n\n      //save answer in the array for user answers\n      const answerObject = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer,\n      };\n      setUserAnswers((prev) => [...prev, answerObject]);\n    }\n  };\n\n  const nextQuestion = () => {\n    // move on to the next question if not the last question\n    const nextQuestion = number + 1;\n    if (nextQuestion === TOTAL_QUESTIONS) {\n      setGameOver(true);\n    } else {\n      setNumber(nextQuestion);\n    }\n  };\n\n  return (\n    <>\n      <GlobalStyle />\n      <Wrapper>\n        <h1>Quiz</h1>\n        {gameOver || userAnswers.length === TOTAL_QUESTIONS ? (\n          <button className=\"start\" onClick={startTrivia}>\n            Start\n          </button>\n        ) : null}\n        {!gameOver && <p className=\"score\">Score:{score}</p>}\n        {loading && <p>Loading Questions ...</p>}\n        {!loading && !gameOver && (\n          <QuestionCard\n            questionNr={number + 1}\n            totalQuestions={TOTAL_QUESTIONS}\n            question={questions[number].question}\n            answers={questions[number].answers}\n            userAnswer={userAnswers ? userAnswers[number] : undefined}\n            callback={checkAnswer}\n          />\n        )}\n        {!gameOver &&\n        !loading &&\n        userAnswers.length === number + 1 &&\n        number !== TOTAL_QUESTIONS - 1 ? (\n          <button className=\"next\" onClick={nextQuestion}>\n            Next question\n          </button>\n        ) : null}\n      </Wrapper>\n    </>\n  );\n};\n\nexport default Main;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Main from \"./pages/main/Main\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Main />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}